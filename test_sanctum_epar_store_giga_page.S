.section .text

.global dut_entry
dut_entry:
  /* INPUT:
    $ra contains return address for this test; do not clobber it */

  /* OUTPUT:
    $a0 should contain:
    0 if the test FAILS
    1 if the test PASSES */

  /* Set up a trap vector */
  la t0, .new_trap_vector
  csrw mtvec, t0

  /* Define the enclave-private memory as two Gigas of DRAM */ 
  li t0, 0x00000000 # Set mevbase
  csrw 0x07C0, t0
  li t0, 0xFFFFFFFE00000000
  csrw 0x07C1, t0 # Set mevmask

  li t0, 0xFFFFFFFFFFFFFFFF
  csrw 0x07C4, t0  # Set memrbm

  la t0, _illegal_address_giga
  csrw 0x07C7, t0 # Set meparbase
  li t0, 0xF0000000
  csrw 0x07C8, t0 # Set meparmask

  /* Activate Address Translation */
  /** Set satp mode to Sv39 **/  
  # SATP_MODE: 0xFF00000000000000
  li t0, 0x8000000000000000 # Mode Sv39 is value 8
  csrw satp, t0
  
  /** Set the root page table address for enclave page walk **/
  la t0, root_page_table
  srl t0, t0, 0xC # Physical Address divided by 4KiB
  csrw 0x07C2, t0 # Set meatp

  /** Enter malicious_program in U-mode **/
  la a0, .malicious_program
  j switch_u_mode
 
.malicious_program: /* Tries to write at the limit of the protected range and then inside */
  //la t0, _illegal_address_giga // Write on next Giga page // NEXT GIGA PAGE IS OUTSIDE OF RAM
  //li t1, 0x40000000
  //add t0, t0, t1
  //sw zero, 0(t0)
  la t0, _illegal_address_giga // Write the last address before the illegal Giga page
  sw zero, -4(t0)
.illegal_store: // Write the first address of the illegal Giga page
  sw zero, 0(t0)

  j .test_failure

.new_trap_vector:
  csrr t0, mcause // Check this is a Store Page Fault
  li t1, 0xF
  bne t0, t1, .test_failure

  csrr t0, mepc   // That happend during the illegal store
  la t1, .illegal_store
  bne t0, t1, .test_failure

  csrr t0, mtval  // On the illegal address
  la t1, _illegal_address_giga
  bne t0, t1, .test_failure

  li a0, 1 // The test is successful
  jr ra

.test_failure:
  li a0, 0 // Fail this test!
  jr ra /* return to  caller */
